# SPDX-License-Identifier: GPL-2.0-or-later
# Toposes: Elementary toposes
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecord.gi

#! @Chapter Cocartesian Categories

#! @Section Add-methods

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCocartesianCodistributivityExpanding`.
#! $F: ( a, L ) \mapsto \mathtt{LeftCocartesianCodistributivityExpanding}(a, L)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCocartesianCodistributivityExpanding",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCocartesianCodistributivityExpanding",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCocartesianCodistributivityExpanding",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCocartesianCodistributivityExpanding",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCocartesianCodistributivityExpandingWithGivenObjects`.
#! $F: ( s, a, L, r ) \mapsto \mathtt{LeftCocartesianCodistributivityExpandingWithGivenObjects}(s, a, L, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCocartesianCodistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCocartesianCodistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCocartesianCodistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCocartesianCodistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCocartesianCodistributivityFactoring`.
#! $F: ( a, L ) \mapsto \mathtt{LeftCocartesianCodistributivityFactoring}(a, L)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCocartesianCodistributivityFactoring",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCocartesianCodistributivityFactoring",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCocartesianCodistributivityFactoring",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCocartesianCodistributivityFactoring",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCocartesianCodistributivityFactoringWithGivenObjects`.
#! $F: ( s, a, L, r ) \mapsto \mathtt{LeftCocartesianCodistributivityFactoringWithGivenObjects}(s, a, L, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCocartesianCodistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCocartesianCodistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCocartesianCodistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCocartesianCodistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCocartesianCodistributivityExpanding`.
#! $F: ( L, a ) \mapsto \mathtt{RightCocartesianCodistributivityExpanding}(L, a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddRightCocartesianCodistributivityExpanding",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddRightCocartesianCodistributivityExpanding",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddRightCocartesianCodistributivityExpanding",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddRightCocartesianCodistributivityExpanding",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCocartesianCodistributivityExpandingWithGivenObjects`.
#! $F: ( s, L, a, r ) \mapsto \mathtt{RightCocartesianCodistributivityExpandingWithGivenObjects}(s, L, a, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddRightCocartesianCodistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddRightCocartesianCodistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddRightCocartesianCodistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddRightCocartesianCodistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCocartesianCodistributivityFactoring`.
#! $F: ( L, a ) \mapsto \mathtt{RightCocartesianCodistributivityFactoring}(L, a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddRightCocartesianCodistributivityFactoring",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddRightCocartesianCodistributivityFactoring",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddRightCocartesianCodistributivityFactoring",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddRightCocartesianCodistributivityFactoring",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCocartesianCodistributivityFactoringWithGivenObjects`.
#! $F: ( s, L, a, r ) \mapsto \mathtt{RightCocartesianCodistributivityFactoringWithGivenObjects}(s, L, a, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddRightCocartesianCodistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddRightCocartesianCodistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddRightCocartesianCodistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddRightCocartesianCodistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsList ] );
