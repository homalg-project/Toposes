# SPDX-License-Identifier: GPL-2.0-or-later
# Toposes: Elementary toposes
#
# Implementations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

## CartesianSquareOfSubobjectClassifier
InstallMethod( AddCartesianSquareOfSubobjectClassifier,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianSquareOfSubobjectClassifier", category, func, -1 );
    
end );

InstallMethod( AddCartesianSquareOfSubobjectClassifier,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianSquareOfSubobjectClassifier", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## ClassifyingMorphismOfSubobject
InstallMethod( AddClassifyingMorphismOfSubobject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ClassifyingMorphismOfSubobject", category, func, -1 );
    
end );

InstallMethod( AddClassifyingMorphismOfSubobject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ClassifyingMorphismOfSubobject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## ClassifyingMorphismOfSubobjectWithGivenSubobjectClassifier
InstallMethod( AddClassifyingMorphismOfSubobjectWithGivenSubobjectClassifier,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ClassifyingMorphismOfSubobjectWithGivenSubobjectClassifier", category, func, -1 );
    
end );

InstallMethod( AddClassifyingMorphismOfSubobjectWithGivenSubobjectClassifier,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ClassifyingMorphismOfSubobjectWithGivenSubobjectClassifier", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( ClassifyingMorphismOfSubobjectWithGivenSubobjectClassifier,
                    "ClassifyingMorphismOfSubobjectWithGivenSubobjectClassifier by calling ClassifyingMorphismOfSubobject with the WithGiven argument(s) dropped",
                    [
                        [ ClassifyingMorphismOfSubobject, 1 ],
                    ],
  function( cat, alpha, Omega )
    
    return ClassifyingMorphismOfSubobject( cat, alpha );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( ClassifyingMorphismOfSubobject,
                    "ClassifyingMorphismOfSubobject by calling ClassifyingMorphismOfSubobjectWithGivenSubobjectClassifier with the WithGiven object(s)",
                    [
                        [ ClassifyingMorphismOfSubobjectWithGivenSubobjectClassifier, 1 ],
                        [ SubobjectClassifier, 1 ],
                    ],
  function( cat, alpha )
    
    return ClassifyingMorphismOfSubobjectWithGivenSubobjectClassifier( cat, alpha, SubobjectClassifier( cat ) );
    
end : is_with_given_derivation := true );

## CoproductComplement
InstallMethod( AddCoproductComplement,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoproductComplement", category, func, -1 );
    
end );

InstallMethod( AddCoproductComplement,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoproductComplement", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## DirectProductComplement
InstallMethod( AddDirectProductComplement,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductComplement", category, func, -1 );
    
end );

InstallMethod( AddDirectProductComplement,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductComplement", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## EmbeddingOfIntersectionSubobject
InstallMethod( AddEmbeddingOfIntersectionSubobject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "EmbeddingOfIntersectionSubobject", category, func, -1 );
    
end );

InstallMethod( AddEmbeddingOfIntersectionSubobject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "EmbeddingOfIntersectionSubobject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## EmbeddingOfIntersectionSubobjectWithGivenIntersection
InstallMethod( AddEmbeddingOfIntersectionSubobjectWithGivenIntersection,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "EmbeddingOfIntersectionSubobjectWithGivenIntersection", category, func, -1 );
    
end );

InstallMethod( AddEmbeddingOfIntersectionSubobjectWithGivenIntersection,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "EmbeddingOfIntersectionSubobjectWithGivenIntersection", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( EmbeddingOfIntersectionSubobjectWithGivenIntersection,
                    "EmbeddingOfIntersectionSubobjectWithGivenIntersection by calling EmbeddingOfIntersectionSubobject with the WithGiven argument(s) dropped",
                    [
                        [ EmbeddingOfIntersectionSubobject, 1 ],
                    ],
  function( cat, iota1, iota2, intersection )
    
    return EmbeddingOfIntersectionSubobject( cat, iota1, iota2 );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( EmbeddingOfIntersectionSubobject,
                    "EmbeddingOfIntersectionSubobject by calling EmbeddingOfIntersectionSubobjectWithGivenIntersection with the WithGiven object(s)",
                    [
                        [ EmbeddingOfIntersectionSubobjectWithGivenIntersection, 1 ],
                        [ IntersectionSubobject, 1 ],
                    ],
  function( cat, iota1, iota2 )
    
    return EmbeddingOfIntersectionSubobjectWithGivenIntersection( cat, iota1, iota2, IntersectionSubobject( iota1, iota2 ) );
    
end : is_with_given_derivation := true );

## EmbeddingOfPseudoComplementSubobject
InstallMethod( AddEmbeddingOfPseudoComplementSubobject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "EmbeddingOfPseudoComplementSubobject", category, func, -1 );
    
end );

InstallMethod( AddEmbeddingOfPseudoComplementSubobject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "EmbeddingOfPseudoComplementSubobject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## EmbeddingOfPseudoComplementSubobjectWithGivenPseudoComplement
InstallMethod( AddEmbeddingOfPseudoComplementSubobjectWithGivenPseudoComplement,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "EmbeddingOfPseudoComplementSubobjectWithGivenPseudoComplement", category, func, -1 );
    
end );

InstallMethod( AddEmbeddingOfPseudoComplementSubobjectWithGivenPseudoComplement,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "EmbeddingOfPseudoComplementSubobjectWithGivenPseudoComplement", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( EmbeddingOfPseudoComplementSubobjectWithGivenPseudoComplement,
                    "EmbeddingOfPseudoComplementSubobjectWithGivenPseudoComplement by calling EmbeddingOfPseudoComplementSubobject with the WithGiven argument(s) dropped",
                    [
                        [ EmbeddingOfPseudoComplementSubobject, 1 ],
                    ],
  function( cat, iota, complement )
    
    return EmbeddingOfPseudoComplementSubobject( cat, iota );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( EmbeddingOfPseudoComplementSubobject,
                    "EmbeddingOfPseudoComplementSubobject by calling EmbeddingOfPseudoComplementSubobjectWithGivenPseudoComplement with the WithGiven object(s)",
                    [
                        [ EmbeddingOfPseudoComplementSubobjectWithGivenPseudoComplement, 1 ],
                        [ PseudoComplementSubobject, 1 ],
                    ],
  function( cat, iota )
    
    return EmbeddingOfPseudoComplementSubobjectWithGivenPseudoComplement( cat, iota, PseudoComplementSubobject( iota ) );
    
end : is_with_given_derivation := true );

## EmbeddingOfRelativePseudoComplementSubobject
InstallMethod( AddEmbeddingOfRelativePseudoComplementSubobject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "EmbeddingOfRelativePseudoComplementSubobject", category, func, -1 );
    
end );

InstallMethod( AddEmbeddingOfRelativePseudoComplementSubobject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "EmbeddingOfRelativePseudoComplementSubobject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## EmbeddingOfRelativePseudoComplementSubobjectWithGivenImplication
InstallMethod( AddEmbeddingOfRelativePseudoComplementSubobjectWithGivenImplication,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "EmbeddingOfRelativePseudoComplementSubobjectWithGivenImplication", category, func, -1 );
    
end );

InstallMethod( AddEmbeddingOfRelativePseudoComplementSubobjectWithGivenImplication,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "EmbeddingOfRelativePseudoComplementSubobjectWithGivenImplication", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( EmbeddingOfRelativePseudoComplementSubobjectWithGivenImplication,
                    "EmbeddingOfRelativePseudoComplementSubobjectWithGivenImplication by calling EmbeddingOfRelativePseudoComplementSubobject with the WithGiven argument(s) dropped",
                    [
                        [ EmbeddingOfRelativePseudoComplementSubobject, 1 ],
                    ],
  function( cat, iota1, iota2, implication )
    
    return EmbeddingOfRelativePseudoComplementSubobject( cat, iota1, iota2 );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( EmbeddingOfRelativePseudoComplementSubobject,
                    "EmbeddingOfRelativePseudoComplementSubobject by calling EmbeddingOfRelativePseudoComplementSubobjectWithGivenImplication with the WithGiven object(s)",
                    [
                        [ EmbeddingOfRelativePseudoComplementSubobjectWithGivenImplication, 1 ],
                        [ RelativePseudoComplementSubobject, 1 ],
                    ],
  function( cat, iota1, iota2 )
    
    return EmbeddingOfRelativePseudoComplementSubobjectWithGivenImplication( cat, iota1, iota2, RelativePseudoComplementSubobject( iota1, iota2 ) );
    
end : is_with_given_derivation := true );

## EmbeddingOfUnionSubobject
InstallMethod( AddEmbeddingOfUnionSubobject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "EmbeddingOfUnionSubobject", category, func, -1 );
    
end );

InstallMethod( AddEmbeddingOfUnionSubobject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "EmbeddingOfUnionSubobject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## EmbeddingOfUnionSubobjectWithGivenUnion
InstallMethod( AddEmbeddingOfUnionSubobjectWithGivenUnion,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "EmbeddingOfUnionSubobjectWithGivenUnion", category, func, -1 );
    
end );

InstallMethod( AddEmbeddingOfUnionSubobjectWithGivenUnion,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "EmbeddingOfUnionSubobjectWithGivenUnion", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( EmbeddingOfUnionSubobjectWithGivenUnion,
                    "EmbeddingOfUnionSubobjectWithGivenUnion by calling EmbeddingOfUnionSubobject with the WithGiven argument(s) dropped",
                    [
                        [ EmbeddingOfUnionSubobject, 1 ],
                    ],
  function( cat, iota1, iota2, union )
    
    return EmbeddingOfUnionSubobject( cat, iota1, iota2 );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( EmbeddingOfUnionSubobject,
                    "EmbeddingOfUnionSubobject by calling EmbeddingOfUnionSubobjectWithGivenUnion with the WithGiven object(s)",
                    [
                        [ EmbeddingOfUnionSubobjectWithGivenUnion, 1 ],
                        [ UnionSubobject, 1 ],
                    ],
  function( cat, iota1, iota2 )
    
    return EmbeddingOfUnionSubobjectWithGivenUnion( cat, iota1, iota2, UnionSubobject( iota1, iota2 ) );
    
end : is_with_given_derivation := true );

## ExactCoverWithGlobalElements
InstallMethod( AddExactCoverWithGlobalElements,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExactCoverWithGlobalElements", category, func, -1 );
    
end );

InstallMethod( AddExactCoverWithGlobalElements,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExactCoverWithGlobalElements", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## HasPushoutComplement
InstallMethod( AddHasPushoutComplement,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "HasPushoutComplement", category, func, -1 );
    
end );

InstallMethod( AddHasPushoutComplement,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "HasPushoutComplement", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## IndexOfNonliftableMorphismFromDistinguishedObject
InstallMethod( AddIndexOfNonliftableMorphismFromDistinguishedObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IndexOfNonliftableMorphismFromDistinguishedObject", category, func, -1 );
    
end );

InstallMethod( AddIndexOfNonliftableMorphismFromDistinguishedObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IndexOfNonliftableMorphismFromDistinguishedObject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## InjectionOfCoproductComplement
InstallMethod( AddInjectionOfCoproductComplement,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "InjectionOfCoproductComplement", category, func, -1 );
    
end );

InstallMethod( AddInjectionOfCoproductComplement,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "InjectionOfCoproductComplement", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## InjectionOfCoproductComplementWithGivenCoproductComplement
InstallMethod( AddInjectionOfCoproductComplementWithGivenCoproductComplement,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "InjectionOfCoproductComplementWithGivenCoproductComplement", category, func, -1 );
    
end );

InstallMethod( AddInjectionOfCoproductComplementWithGivenCoproductComplement,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "InjectionOfCoproductComplementWithGivenCoproductComplement", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( InjectionOfCoproductComplementWithGivenCoproductComplement,
                    "InjectionOfCoproductComplementWithGivenCoproductComplement by calling InjectionOfCoproductComplement with the WithGiven argument(s) dropped",
                    [
                        [ InjectionOfCoproductComplement, 1 ],
                    ],
  function( cat, iota, complement )
    
    return InjectionOfCoproductComplement( cat, iota );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( InjectionOfCoproductComplement,
                    "InjectionOfCoproductComplement by calling InjectionOfCoproductComplementWithGivenCoproductComplement with the WithGiven object(s)",
                    [
                        [ InjectionOfCoproductComplementWithGivenCoproductComplement, 1 ],
                        [ CoproductComplement, 1 ],
                    ],
  function( cat, iota )
    
    return InjectionOfCoproductComplementWithGivenCoproductComplement( cat, iota, CoproductComplement( cat, iota ) );
    
end : is_with_given_derivation := true );

## IntersectionSubobject
InstallMethod( AddIntersectionSubobject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IntersectionSubobject", category, func, -1 );
    
end );

InstallMethod( AddIntersectionSubobject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IntersectionSubobject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## IsomorphismOntoCartesianSquareOfPowerObject
InstallMethod( AddIsomorphismOntoCartesianSquareOfPowerObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismOntoCartesianSquareOfPowerObject", category, func, -1 );
    
end );

InstallMethod( AddIsomorphismOntoCartesianSquareOfPowerObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismOntoCartesianSquareOfPowerObject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## IsomorphismOntoCartesianSquareOfPowerObjectWithGivenObjects
InstallMethod( AddIsomorphismOntoCartesianSquareOfPowerObjectWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismOntoCartesianSquareOfPowerObjectWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddIsomorphismOntoCartesianSquareOfPowerObjectWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismOntoCartesianSquareOfPowerObjectWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( IsomorphismOntoCartesianSquareOfPowerObjectWithGivenObjects,
                    "IsomorphismOntoCartesianSquareOfPowerObjectWithGivenObjects by calling IsomorphismOntoCartesianSquareOfPowerObject with the WithGiven argument(s) dropped",
                    [
                        [ IsomorphismOntoCartesianSquareOfPowerObject, 1 ],
                    ],
  function( cat, ExpaOmega2, a, PaxPa )
    
    return IsomorphismOntoCartesianSquareOfPowerObject( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( IsomorphismOntoCartesianSquareOfPowerObject,
                    "IsomorphismOntoCartesianSquareOfPowerObject by calling IsomorphismOntoCartesianSquareOfPowerObjectWithGivenObjects with the WithGiven object(s)",
                    [
                        [ IsomorphismOntoCartesianSquareOfPowerObjectWithGivenObjects, 1 ],
                        [ ExponentialOnObjects, 1 ],
                        [ CartesianSquareOfSubobjectClassifier, 1 ],
                        [ DirectProduct, 1 ],
                        [ PowerObject, 2 ],
                    ],
  function( cat, a )
    
    return IsomorphismOntoCartesianSquareOfPowerObjectWithGivenObjects( cat, ExponentialOnObjects( cat, a, CartesianSquareOfSubobjectClassifier( cat ) ), a, DirectProduct( cat, [ PowerObject( cat, a ), PowerObject( cat, a ) ] ) );
    
end : is_with_given_derivation := true );

## LawvereTierneyEmbeddingsOfSubobjectClassifiers
InstallMethod( AddLawvereTierneyEmbeddingsOfSubobjectClassifiers,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "LawvereTierneyEmbeddingsOfSubobjectClassifiers", category, func, -1 );
    
end );

InstallMethod( AddLawvereTierneyEmbeddingsOfSubobjectClassifiers,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "LawvereTierneyEmbeddingsOfSubobjectClassifiers", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## LawvereTierneyLocalModalityOperators
InstallMethod( AddLawvereTierneyLocalModalityOperators,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "LawvereTierneyLocalModalityOperators", category, func, -1 );
    
end );

InstallMethod( AddLawvereTierneyLocalModalityOperators,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "LawvereTierneyLocalModalityOperators", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## LawvereTierneySubobjects
InstallMethod( AddLawvereTierneySubobjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "LawvereTierneySubobjects", category, func, -1 );
    
end );

InstallMethod( AddLawvereTierneySubobjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "LawvereTierneySubobjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## LeftFiberMorphism
InstallMethod( AddLeftFiberMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "LeftFiberMorphism", category, func, -1 );
    
end );

InstallMethod( AddLeftFiberMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "LeftFiberMorphism", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## LeftFiberMorphismWithGivenObjects
InstallMethod( AddLeftFiberMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "LeftFiberMorphismWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddLeftFiberMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "LeftFiberMorphismWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( LeftFiberMorphismWithGivenObjects,
                    "LeftFiberMorphismWithGivenObjects by calling LeftFiberMorphism with the WithGiven argument(s) dropped",
                    [
                        [ LeftFiberMorphism, 1 ],
                    ],
  function( cat, Pbxc_b, b, c, Pc )
    
    return LeftFiberMorphism( cat, b, c );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( LeftFiberMorphism,
                    "LeftFiberMorphism by calling LeftFiberMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ LeftFiberMorphismWithGivenObjects, 1 ],
                        [ DirectProduct, 2 ],
                        [ PowerObject, 2 ],
                    ],
  function( cat, b, c )
    
    return LeftFiberMorphismWithGivenObjects( cat, DirectProduct( cat, [ PowerObject( cat, DirectProduct( cat, [ b, c ] ) ), b ] ), b, c, PowerObject( cat, c ) );
    
end : is_with_given_derivation := true );

## ListOfSubobjects
InstallMethod( AddListOfSubobjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ListOfSubobjects", category, func, -1 );
    
end );

InstallMethod( AddListOfSubobjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ListOfSubobjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## LowerSegmentOfRelation
InstallMethod( AddLowerSegmentOfRelation,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "LowerSegmentOfRelation", category, func, -1 );
    
end );

InstallMethod( AddLowerSegmentOfRelation,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "LowerSegmentOfRelation", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## LowerSegmentOfRelationWithGivenRange
InstallMethod( AddLowerSegmentOfRelationWithGivenRange,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "LowerSegmentOfRelationWithGivenRange", category, func, -1 );
    
end );

InstallMethod( AddLowerSegmentOfRelationWithGivenRange,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "LowerSegmentOfRelationWithGivenRange", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( LowerSegmentOfRelationWithGivenRange,
                    "LowerSegmentOfRelationWithGivenRange by calling LowerSegmentOfRelation with the WithGiven argument(s) dropped",
                    [
                        [ LowerSegmentOfRelation, 1 ],
                    ],
  function( cat, a, b, mu, Pa )
    
    return LowerSegmentOfRelation( cat, a, b, mu );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( LowerSegmentOfRelation,
                    "LowerSegmentOfRelation by calling LowerSegmentOfRelationWithGivenRange with the WithGiven object(s)",
                    [
                        [ LowerSegmentOfRelationWithGivenRange, 1 ],
                        [ PowerObject, 1 ],
                    ],
  function( cat, a, b, mu )
    
    return LowerSegmentOfRelationWithGivenRange( cat, a, b, mu, PowerObject( cat, a ) );
    
end : is_with_given_derivation := true );

## NonliftableMorphismFromDistinguishedObject
InstallMethod( AddNonliftableMorphismFromDistinguishedObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "NonliftableMorphismFromDistinguishedObject", category, func, -1 );
    
end );

InstallMethod( AddNonliftableMorphismFromDistinguishedObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "NonliftableMorphismFromDistinguishedObject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## PLeftTransposeMorphism
InstallMethod( AddPLeftTransposeMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PLeftTransposeMorphism", category, func, -1 );
    
end );

InstallMethod( AddPLeftTransposeMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PLeftTransposeMorphism", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## PLeftTransposeMorphismWithGivenRange
InstallMethod( AddPLeftTransposeMorphismWithGivenRange,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PLeftTransposeMorphismWithGivenRange", category, func, -1 );
    
end );

InstallMethod( AddPLeftTransposeMorphismWithGivenRange,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PLeftTransposeMorphismWithGivenRange", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( PLeftTransposeMorphismWithGivenRange,
                    "PLeftTransposeMorphismWithGivenRange by calling PLeftTransposeMorphism with the WithGiven argument(s) dropped",
                    [
                        [ PLeftTransposeMorphism, 1 ],
                    ],
  function( cat, a, b, f, Pb )
    
    return PLeftTransposeMorphism( cat, a, b, f );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( PLeftTransposeMorphism,
                    "PLeftTransposeMorphism by calling PLeftTransposeMorphismWithGivenRange with the WithGiven object(s)",
                    [
                        [ PLeftTransposeMorphismWithGivenRange, 1 ],
                        [ PowerObject, 1 ],
                    ],
  function( cat, a, b, f )
    
    return PLeftTransposeMorphismWithGivenRange( cat, a, b, f, PowerObject( cat, b ) );
    
end : is_with_given_derivation := true );

## PRightTransposeMorphism
InstallMethod( AddPRightTransposeMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PRightTransposeMorphism", category, func, -1 );
    
end );

InstallMethod( AddPRightTransposeMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PRightTransposeMorphism", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## PRightTransposeMorphismWithGivenRange
InstallMethod( AddPRightTransposeMorphismWithGivenRange,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PRightTransposeMorphismWithGivenRange", category, func, -1 );
    
end );

InstallMethod( AddPRightTransposeMorphismWithGivenRange,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PRightTransposeMorphismWithGivenRange", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( PRightTransposeMorphismWithGivenRange,
                    "PRightTransposeMorphismWithGivenRange by calling PRightTransposeMorphism with the WithGiven argument(s) dropped",
                    [
                        [ PRightTransposeMorphism, 1 ],
                    ],
  function( cat, a, b, f, Pa )
    
    return PRightTransposeMorphism( cat, a, b, f );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( PRightTransposeMorphism,
                    "PRightTransposeMorphism by calling PRightTransposeMorphismWithGivenRange with the WithGiven object(s)",
                    [
                        [ PRightTransposeMorphismWithGivenRange, 1 ],
                        [ PowerObject, 1 ],
                    ],
  function( cat, a, b, f )
    
    return PRightTransposeMorphismWithGivenRange( cat, a, b, f, PowerObject( cat, a ) );
    
end : is_with_given_derivation := true );

## PowerObject
InstallMethod( AddPowerObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PowerObject", category, func, -1 );
    
end );

InstallMethod( AddPowerObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PowerObject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## PowerObjectFunctorial
InstallMethod( AddPowerObjectFunctorial,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PowerObjectFunctorial", category, func, -1 );
    
end );

InstallMethod( AddPowerObjectFunctorial,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PowerObjectFunctorial", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## PowerObjectFunctorialWithGivenPowerObjects
InstallMethod( AddPowerObjectFunctorialWithGivenPowerObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PowerObjectFunctorialWithGivenPowerObjects", category, func, -1 );
    
end );

InstallMethod( AddPowerObjectFunctorialWithGivenPowerObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PowerObjectFunctorialWithGivenPowerObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( PowerObjectFunctorialWithGivenPowerObjects,
                    "PowerObjectFunctorialWithGivenPowerObjects by calling PowerObjectFunctorial with the WithGiven argument(s) dropped",
                    [
                        [ PowerObjectFunctorial, 1 ],
                    ],
  function( cat, Pb, f, Pa )
    
    return PowerObjectFunctorial( cat, f );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( PowerObjectFunctorial,
                    "PowerObjectFunctorial by calling PowerObjectFunctorialWithGivenPowerObjects with the WithGiven object(s)",
                    [
                        [ PowerObjectFunctorialWithGivenPowerObjects, 1 ],
                        [ PowerObject, 2 ],
                    ],
  function( cat, f )
    
    return PowerObjectFunctorialWithGivenPowerObjects( cat, PowerObject( cat, Target( f ) ), f, PowerObject( cat, Source( f ) ) );
    
end : is_with_given_derivation := true );

## PowerObjectLeftEvaluationMorphism
InstallMethod( AddPowerObjectLeftEvaluationMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PowerObjectLeftEvaluationMorphism", category, func, -1 );
    
end );

InstallMethod( AddPowerObjectLeftEvaluationMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PowerObjectLeftEvaluationMorphism", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## PowerObjectLeftEvaluationMorphismWithGivenObjects
InstallMethod( AddPowerObjectLeftEvaluationMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PowerObjectLeftEvaluationMorphismWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddPowerObjectLeftEvaluationMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PowerObjectLeftEvaluationMorphismWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( PowerObjectLeftEvaluationMorphismWithGivenObjects,
                    "PowerObjectLeftEvaluationMorphismWithGivenObjects by calling PowerObjectLeftEvaluationMorphism with the WithGiven argument(s) dropped",
                    [
                        [ PowerObjectLeftEvaluationMorphism, 1 ],
                    ],
  function( cat, Pa_xa, a, Omega )
    
    return PowerObjectLeftEvaluationMorphism( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( PowerObjectLeftEvaluationMorphism,
                    "PowerObjectLeftEvaluationMorphism by calling PowerObjectLeftEvaluationMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ PowerObjectLeftEvaluationMorphismWithGivenObjects, 1 ],
                        [ PowerObject, 1 ],
                        [ DirectProduct, 1 ],
                        [ SubobjectClassifier, 1 ],
                    ],
  function( cat, a )
    
    return PowerObjectLeftEvaluationMorphismWithGivenObjects( cat, DirectProduct( cat, [ PowerObject( cat, a ), a ] ), a, SubobjectClassifier( cat ) );
    
end : is_with_given_derivation := true );

## PowerObjectRightEvaluationMorphism
InstallMethod( AddPowerObjectRightEvaluationMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PowerObjectRightEvaluationMorphism", category, func, -1 );
    
end );

InstallMethod( AddPowerObjectRightEvaluationMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PowerObjectRightEvaluationMorphism", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## PowerObjectRightEvaluationMorphismWithGivenObjects
InstallMethod( AddPowerObjectRightEvaluationMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PowerObjectRightEvaluationMorphismWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddPowerObjectRightEvaluationMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PowerObjectRightEvaluationMorphismWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( PowerObjectRightEvaluationMorphismWithGivenObjects,
                    "PowerObjectRightEvaluationMorphismWithGivenObjects by calling PowerObjectRightEvaluationMorphism with the WithGiven argument(s) dropped",
                    [
                        [ PowerObjectRightEvaluationMorphism, 1 ],
                    ],
  function( cat, axPa, a, Omega )
    
    return PowerObjectRightEvaluationMorphism( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( PowerObjectRightEvaluationMorphism,
                    "PowerObjectRightEvaluationMorphism by calling PowerObjectRightEvaluationMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ PowerObjectRightEvaluationMorphismWithGivenObjects, 1 ],
                        [ PowerObject, 1 ],
                        [ DirectProduct, 1 ],
                        [ SubobjectClassifier, 1 ],
                    ],
  function( cat, a )
    
    return PowerObjectRightEvaluationMorphismWithGivenObjects( cat, DirectProduct( cat, [ a, PowerObject( cat, a ) ] ), a, SubobjectClassifier( cat ) );
    
end : is_with_given_derivation := true );

## ProjectionInDirectProductComplement
InstallMethod( AddProjectionInDirectProductComplement,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ProjectionInDirectProductComplement", category, func, -1 );
    
end );

InstallMethod( AddProjectionInDirectProductComplement,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ProjectionInDirectProductComplement", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## ProjectionInDirectProductComplementWithGivenDirectProductComplement
InstallMethod( AddProjectionInDirectProductComplementWithGivenDirectProductComplement,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ProjectionInDirectProductComplementWithGivenDirectProductComplement", category, func, -1 );
    
end );

InstallMethod( AddProjectionInDirectProductComplementWithGivenDirectProductComplement,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ProjectionInDirectProductComplementWithGivenDirectProductComplement", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( ProjectionInDirectProductComplementWithGivenDirectProductComplement,
                    "ProjectionInDirectProductComplementWithGivenDirectProductComplement by calling ProjectionInDirectProductComplement with the WithGiven argument(s) dropped",
                    [
                        [ ProjectionInDirectProductComplement, 1 ],
                    ],
  function( cat, pi, complement )
    
    return ProjectionInDirectProductComplement( cat, pi );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( ProjectionInDirectProductComplement,
                    "ProjectionInDirectProductComplement by calling ProjectionInDirectProductComplementWithGivenDirectProductComplement with the WithGiven object(s)",
                    [
                        [ ProjectionInDirectProductComplementWithGivenDirectProductComplement, 1 ],
                        [ DirectProductComplement, 1 ],
                    ],
  function( cat, pi )
    
    return ProjectionInDirectProductComplementWithGivenDirectProductComplement( cat, pi, DirectProductComplement( cat, pi ) );
    
end : is_with_given_derivation := true );

## PseudoComplementSubobject
InstallMethod( AddPseudoComplementSubobject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PseudoComplementSubobject", category, func, -1 );
    
end );

InstallMethod( AddPseudoComplementSubobject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PseudoComplementSubobject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## PushoutComplement
InstallMethod( AddPushoutComplement,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "PushoutComplement", category, func, -1 );
    
end );

InstallMethod( AddPushoutComplement,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "PushoutComplement", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## RelativePseudoComplementSubobject
InstallMethod( AddRelativePseudoComplementSubobject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativePseudoComplementSubobject", category, func, -1 );
    
end );

InstallMethod( AddRelativePseudoComplementSubobject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativePseudoComplementSubobject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## RelativeTruthMorphismOfAnd
InstallMethod( AddRelativeTruthMorphismOfAnd,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfAnd", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfAnd,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfAnd", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## RelativeTruthMorphismOfAndWithGivenObjects
InstallMethod( AddRelativeTruthMorphismOfAndWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfAndWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfAndWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfAndWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( RelativeTruthMorphismOfAndWithGivenObjects,
                    "RelativeTruthMorphismOfAndWithGivenObjects by calling RelativeTruthMorphismOfAnd with the WithGiven argument(s) dropped",
                    [
                        [ RelativeTruthMorphismOfAnd, 1 ],
                    ],
  function( cat, PaxPa, a, Pa )
    
    return RelativeTruthMorphismOfAnd( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( RelativeTruthMorphismOfAnd,
                    "RelativeTruthMorphismOfAnd by calling RelativeTruthMorphismOfAndWithGivenObjects with the WithGiven object(s)",
                    [
                        [ RelativeTruthMorphismOfAndWithGivenObjects, 1 ],
                        [ DirectProduct, 1 ],
                        [ PowerObject, 3 ],
                    ],
  function( cat, a )
    
    return RelativeTruthMorphismOfAndWithGivenObjects( cat, DirectProduct( cat, [ PowerObject( cat, a ), PowerObject( cat, a ) ] ), a, PowerObject( cat, a ) );
    
end : is_with_given_derivation := true );

## RelativeTruthMorphismOfFalse
InstallMethod( AddRelativeTruthMorphismOfFalse,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfFalse", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfFalse,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfFalse", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## RelativeTruthMorphismOfFalseWithGivenObjects
InstallMethod( AddRelativeTruthMorphismOfFalseWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfFalseWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfFalseWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfFalseWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( RelativeTruthMorphismOfFalseWithGivenObjects,
                    "RelativeTruthMorphismOfFalseWithGivenObjects by calling RelativeTruthMorphismOfFalse with the WithGiven argument(s) dropped",
                    [
                        [ RelativeTruthMorphismOfFalse, 1 ],
                    ],
  function( cat, T, a, Pa )
    
    return RelativeTruthMorphismOfFalse( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( RelativeTruthMorphismOfFalse,
                    "RelativeTruthMorphismOfFalse by calling RelativeTruthMorphismOfFalseWithGivenObjects with the WithGiven object(s)",
                    [
                        [ RelativeTruthMorphismOfFalseWithGivenObjects, 1 ],
                        [ TerminalObject, 1 ],
                        [ PowerObject, 1 ],
                    ],
  function( cat, a )
    
    return RelativeTruthMorphismOfFalseWithGivenObjects( cat, TerminalObject( cat ), a, PowerObject( cat, a ) );
    
end : is_with_given_derivation := true );

## RelativeTruthMorphismOfImplies
InstallMethod( AddRelativeTruthMorphismOfImplies,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfImplies", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfImplies,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfImplies", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## RelativeTruthMorphismOfImpliesWithGivenObjects
InstallMethod( AddRelativeTruthMorphismOfImpliesWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfImpliesWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfImpliesWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfImpliesWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( RelativeTruthMorphismOfImpliesWithGivenObjects,
                    "RelativeTruthMorphismOfImpliesWithGivenObjects by calling RelativeTruthMorphismOfImplies with the WithGiven argument(s) dropped",
                    [
                        [ RelativeTruthMorphismOfImplies, 1 ],
                    ],
  function( cat, PaxPa, a, Pa )
    
    return RelativeTruthMorphismOfImplies( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( RelativeTruthMorphismOfImplies,
                    "RelativeTruthMorphismOfImplies by calling RelativeTruthMorphismOfImpliesWithGivenObjects with the WithGiven object(s)",
                    [
                        [ RelativeTruthMorphismOfImpliesWithGivenObjects, 1 ],
                        [ DirectProduct, 1 ],
                        [ PowerObject, 3 ],
                    ],
  function( cat, a )
    
    return RelativeTruthMorphismOfImpliesWithGivenObjects( cat, DirectProduct( cat, [ PowerObject( cat, a ), PowerObject( cat, a ) ] ), a, PowerObject( cat, a ) );
    
end : is_with_given_derivation := true );

## RelativeTruthMorphismOfNot
InstallMethod( AddRelativeTruthMorphismOfNot,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfNot", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfNot,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfNot", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## RelativeTruthMorphismOfNotWithGivenObjects
InstallMethod( AddRelativeTruthMorphismOfNotWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfNotWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfNotWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfNotWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( RelativeTruthMorphismOfNotWithGivenObjects,
                    "RelativeTruthMorphismOfNotWithGivenObjects by calling RelativeTruthMorphismOfNot with the WithGiven argument(s) dropped",
                    [
                        [ RelativeTruthMorphismOfNot, 1 ],
                    ],
  function( cat, Pa, a, Pa1 )
    
    return RelativeTruthMorphismOfNot( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( RelativeTruthMorphismOfNot,
                    "RelativeTruthMorphismOfNot by calling RelativeTruthMorphismOfNotWithGivenObjects with the WithGiven object(s)",
                    [
                        [ RelativeTruthMorphismOfNotWithGivenObjects, 1 ],
                        [ PowerObject, 2 ],
                    ],
  function( cat, a )
    
    return RelativeTruthMorphismOfNotWithGivenObjects( cat, PowerObject( cat, a ), a, PowerObject( cat, a ) );
    
end : is_with_given_derivation := true );

## RelativeTruthMorphismOfOr
InstallMethod( AddRelativeTruthMorphismOfOr,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfOr", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfOr,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfOr", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## RelativeTruthMorphismOfOrWithGivenObjects
InstallMethod( AddRelativeTruthMorphismOfOrWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfOrWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfOrWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfOrWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( RelativeTruthMorphismOfOrWithGivenObjects,
                    "RelativeTruthMorphismOfOrWithGivenObjects by calling RelativeTruthMorphismOfOr with the WithGiven argument(s) dropped",
                    [
                        [ RelativeTruthMorphismOfOr, 1 ],
                    ],
  function( cat, PaxPa, a, Pa )
    
    return RelativeTruthMorphismOfOr( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( RelativeTruthMorphismOfOr,
                    "RelativeTruthMorphismOfOr by calling RelativeTruthMorphismOfOrWithGivenObjects with the WithGiven object(s)",
                    [
                        [ RelativeTruthMorphismOfOrWithGivenObjects, 1 ],
                        [ DirectProduct, 1 ],
                        [ PowerObject, 3 ],
                    ],
  function( cat, a )
    
    return RelativeTruthMorphismOfOrWithGivenObjects( cat, BinaryDirectProduct( cat, PowerObject( cat, a ), PowerObject( cat, a ) ), a, PowerObject( cat, a ) );
    
end : is_with_given_derivation := true );

## RelativeTruthMorphismOfTrue
InstallMethod( AddRelativeTruthMorphismOfTrue,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfTrue", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfTrue,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfTrue", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## RelativeTruthMorphismOfTrueWithGivenObjects
InstallMethod( AddRelativeTruthMorphismOfTrueWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RelativeTruthMorphismOfTrueWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddRelativeTruthMorphismOfTrueWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RelativeTruthMorphismOfTrueWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( RelativeTruthMorphismOfTrueWithGivenObjects,
                    "RelativeTruthMorphismOfTrueWithGivenObjects by calling RelativeTruthMorphismOfTrue with the WithGiven argument(s) dropped",
                    [
                        [ RelativeTruthMorphismOfTrue, 1 ],
                    ],
  function( cat, T, a, Pa )
    
    return RelativeTruthMorphismOfTrue( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( RelativeTruthMorphismOfTrue,
                    "RelativeTruthMorphismOfTrue by calling RelativeTruthMorphismOfTrueWithGivenObjects with the WithGiven object(s)",
                    [
                        [ RelativeTruthMorphismOfTrueWithGivenObjects, 1 ],
                        [ TerminalObject, 1 ],
                        [ PowerObject, 1 ],
                    ],
  function( cat, a )
    
    return RelativeTruthMorphismOfTrueWithGivenObjects( cat, TerminalObject( cat ), a, PowerObject( cat, a ) );
    
end : is_with_given_derivation := true );

## RightFiberMorphism
InstallMethod( AddRightFiberMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RightFiberMorphism", category, func, -1 );
    
end );

InstallMethod( AddRightFiberMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RightFiberMorphism", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## RightFiberMorphismWithGivenObjects
InstallMethod( AddRightFiberMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RightFiberMorphismWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddRightFiberMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RightFiberMorphismWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( RightFiberMorphismWithGivenObjects,
                    "RightFiberMorphismWithGivenObjects by calling RightFiberMorphism with the WithGiven argument(s) dropped",
                    [
                        [ RightFiberMorphism, 1 ],
                    ],
  function( cat, cxPbxc, b, c, Pb )
    
    return RightFiberMorphism( cat, b, c );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( RightFiberMorphism,
                    "RightFiberMorphism by calling RightFiberMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ RightFiberMorphismWithGivenObjects, 1 ],
                        [ DirectProduct, 2 ],
                        [ PowerObject, 2 ],
                    ],
  function( cat, b, c )
    
    return RightFiberMorphismWithGivenObjects( cat, DirectProduct( cat, [ c, PowerObject( cat, DirectProduct( cat, [ b, c ] ) ) ] ), b, c, PowerObject( cat, b ) );
    
end : is_with_given_derivation := true );

## SingletonMorphism
InstallMethod( AddSingletonMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "SingletonMorphism", category, func, -1 );
    
end );

InstallMethod( AddSingletonMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "SingletonMorphism", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## SingletonMorphismWithGivenPowerObject
InstallMethod( AddSingletonMorphismWithGivenPowerObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "SingletonMorphismWithGivenPowerObject", category, func, -1 );
    
end );

InstallMethod( AddSingletonMorphismWithGivenPowerObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "SingletonMorphismWithGivenPowerObject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( SingletonMorphismWithGivenPowerObject,
                    "SingletonMorphismWithGivenPowerObject by calling SingletonMorphism with the WithGiven argument(s) dropped",
                    [
                        [ SingletonMorphism, 1 ],
                    ],
  function( cat, a, Pa )
    
    return SingletonMorphism( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( SingletonMorphism,
                    "SingletonMorphism by calling SingletonMorphismWithGivenPowerObject with the WithGiven object(s)",
                    [
                        [ SingletonMorphismWithGivenPowerObject, 1 ],
                        [ PowerObject, 1 ],
                    ],
  function( cat, a )
    
    return SingletonMorphismWithGivenPowerObject( cat, a, PowerObject( cat, a ) );
    
end : is_with_given_derivation := true );

## SubobjectClassifier
InstallMethod( AddSubobjectClassifier,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "SubobjectClassifier", category, func, -1 );
    
end );

InstallMethod( AddSubobjectClassifier,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "SubobjectClassifier", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## SubobjectOfClassifyingMorphism
InstallMethod( AddSubobjectOfClassifyingMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "SubobjectOfClassifyingMorphism", category, func, -1 );
    
end );

InstallMethod( AddSubobjectOfClassifyingMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "SubobjectOfClassifyingMorphism", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## TruthMorphismOfAnd
InstallMethod( AddTruthMorphismOfAnd,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfAnd", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfAnd,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfAnd", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## TruthMorphismOfAndWithGivenObjects
InstallMethod( AddTruthMorphismOfAndWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfAndWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfAndWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfAndWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( TruthMorphismOfAndWithGivenObjects,
                    "TruthMorphismOfAndWithGivenObjects by calling TruthMorphismOfAnd with the WithGiven argument(s) dropped",
                    [
                        [ TruthMorphismOfAnd, 1 ],
                    ],
  function( cat, Omega2, Omega )
    
    return TruthMorphismOfAnd( cat );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( TruthMorphismOfAnd,
                    "TruthMorphismOfAnd by calling TruthMorphismOfAndWithGivenObjects with the WithGiven object(s)",
                    [
                        [ TruthMorphismOfAndWithGivenObjects, 1 ],
                        [ CartesianSquareOfSubobjectClassifier, 1 ],
                        [ SubobjectClassifier, 1 ],
                    ],
  function( cat )
    
    return TruthMorphismOfAndWithGivenObjects( cat, CartesianSquareOfSubobjectClassifier( cat ), SubobjectClassifier( cat ) );
    
end : is_with_given_derivation := true );

## TruthMorphismOfFalse
InstallMethod( AddTruthMorphismOfFalse,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfFalse", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfFalse,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfFalse", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## TruthMorphismOfFalseWithGivenObjects
InstallMethod( AddTruthMorphismOfFalseWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfFalseWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfFalseWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfFalseWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( TruthMorphismOfFalseWithGivenObjects,
                    "TruthMorphismOfFalseWithGivenObjects by calling TruthMorphismOfFalse with the WithGiven argument(s) dropped",
                    [
                        [ TruthMorphismOfFalse, 1 ],
                    ],
  function( cat, T, Omega )
    
    return TruthMorphismOfFalse( cat );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( TruthMorphismOfFalse,
                    "TruthMorphismOfFalse by calling TruthMorphismOfFalseWithGivenObjects with the WithGiven object(s)",
                    [
                        [ TruthMorphismOfFalseWithGivenObjects, 1 ],
                        [ TerminalObject, 1 ],
                        [ SubobjectClassifier, 1 ],
                    ],
  function( cat )
    
    return TruthMorphismOfFalseWithGivenObjects( cat, TerminalObject( cat ), SubobjectClassifier( cat ) );
    
end : is_with_given_derivation := true );

## TruthMorphismOfImplies
InstallMethod( AddTruthMorphismOfImplies,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfImplies", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfImplies,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfImplies", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## TruthMorphismOfImpliesWithGivenObjects
InstallMethod( AddTruthMorphismOfImpliesWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfImpliesWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfImpliesWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfImpliesWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( TruthMorphismOfImpliesWithGivenObjects,
                    "TruthMorphismOfImpliesWithGivenObjects by calling TruthMorphismOfImplies with the WithGiven argument(s) dropped",
                    [
                        [ TruthMorphismOfImplies, 1 ],
                    ],
  function( cat, Omega2, Omega )
    
    return TruthMorphismOfImplies( cat );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( TruthMorphismOfImplies,
                    "TruthMorphismOfImplies by calling TruthMorphismOfImpliesWithGivenObjects with the WithGiven object(s)",
                    [
                        [ TruthMorphismOfImpliesWithGivenObjects, 1 ],
                        [ CartesianSquareOfSubobjectClassifier, 1 ],
                        [ SubobjectClassifier, 1 ],
                    ],
  function( cat )
    
    return TruthMorphismOfImpliesWithGivenObjects( cat, CartesianSquareOfSubobjectClassifier( cat ), SubobjectClassifier( cat ) );
    
end : is_with_given_derivation := true );

## TruthMorphismOfNot
InstallMethod( AddTruthMorphismOfNot,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfNot", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfNot,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfNot", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## TruthMorphismOfNotWithGivenObjects
InstallMethod( AddTruthMorphismOfNotWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfNotWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfNotWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfNotWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( TruthMorphismOfNotWithGivenObjects,
                    "TruthMorphismOfNotWithGivenObjects by calling TruthMorphismOfNot with the WithGiven argument(s) dropped",
                    [
                        [ TruthMorphismOfNot, 1 ],
                    ],
  function( cat, Omega, Omega1 )
    
    return TruthMorphismOfNot( cat );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( TruthMorphismOfNot,
                    "TruthMorphismOfNot by calling TruthMorphismOfNotWithGivenObjects with the WithGiven object(s)",
                    [
                        [ TruthMorphismOfNotWithGivenObjects, 1 ],
                        [ SubobjectClassifier, 2 ],
                    ],
  function( cat )
    
    return TruthMorphismOfNotWithGivenObjects( cat, SubobjectClassifier( cat ), SubobjectClassifier( cat ) );
    
end : is_with_given_derivation := true );

## TruthMorphismOfOr
InstallMethod( AddTruthMorphismOfOr,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfOr", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfOr,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfOr", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## TruthMorphismOfOrWithGivenObjects
InstallMethod( AddTruthMorphismOfOrWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfOrWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfOrWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfOrWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( TruthMorphismOfOrWithGivenObjects,
                    "TruthMorphismOfOrWithGivenObjects by calling TruthMorphismOfOr with the WithGiven argument(s) dropped",
                    [
                        [ TruthMorphismOfOr, 1 ],
                    ],
  function( cat, Omega2, Omega )
    
    return TruthMorphismOfOr( cat );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( TruthMorphismOfOr,
                    "TruthMorphismOfOr by calling TruthMorphismOfOrWithGivenObjects with the WithGiven object(s)",
                    [
                        [ TruthMorphismOfOrWithGivenObjects, 1 ],
                        [ CartesianSquareOfSubobjectClassifier, 1 ],
                        [ SubobjectClassifier, 1 ],
                    ],
  function( cat )
    
    return TruthMorphismOfOrWithGivenObjects( cat, CartesianSquareOfSubobjectClassifier( cat ), SubobjectClassifier( cat ) );
    
end : is_with_given_derivation := true );

## TruthMorphismOfTrue
InstallMethod( AddTruthMorphismOfTrue,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfTrue", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfTrue,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfTrue", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## TruthMorphismOfTrueWithGivenObjects
InstallMethod( AddTruthMorphismOfTrueWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "TruthMorphismOfTrueWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddTruthMorphismOfTrueWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "TruthMorphismOfTrueWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( TruthMorphismOfTrueWithGivenObjects,
                    "TruthMorphismOfTrueWithGivenObjects by calling TruthMorphismOfTrue with the WithGiven argument(s) dropped",
                    [
                        [ TruthMorphismOfTrue, 1 ],
                    ],
  function( cat, T, Omega )
    
    return TruthMorphismOfTrue( cat );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( TruthMorphismOfTrue,
                    "TruthMorphismOfTrue by calling TruthMorphismOfTrueWithGivenObjects with the WithGiven object(s)",
                    [
                        [ TruthMorphismOfTrueWithGivenObjects, 1 ],
                        [ TerminalObject, 1 ],
                        [ SubobjectClassifier, 1 ],
                    ],
  function( cat )
    
    return TruthMorphismOfTrueWithGivenObjects( cat, TerminalObject( cat ), SubobjectClassifier( cat ) );
    
end : is_with_given_derivation := true );

## UnionSubobject
InstallMethod( AddUnionSubobject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UnionSubobject", category, func, -1 );
    
end );

InstallMethod( AddUnionSubobject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UnionSubobject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## UpperSegmentOfRelation
InstallMethod( AddUpperSegmentOfRelation,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UpperSegmentOfRelation", category, func, -1 );
    
end );

InstallMethod( AddUpperSegmentOfRelation,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UpperSegmentOfRelation", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## UpperSegmentOfRelationWithGivenRange
InstallMethod( AddUpperSegmentOfRelationWithGivenRange,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UpperSegmentOfRelationWithGivenRange", category, func, -1 );
    
end );

InstallMethod( AddUpperSegmentOfRelationWithGivenRange,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UpperSegmentOfRelationWithGivenRange", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( UpperSegmentOfRelationWithGivenRange,
                    "UpperSegmentOfRelationWithGivenRange by calling UpperSegmentOfRelation with the WithGiven argument(s) dropped",
                    [
                        [ UpperSegmentOfRelation, 1 ],
                    ],
  function( cat, a, b, mu, Pb )
    
    return UpperSegmentOfRelation( cat, a, b, mu );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( UpperSegmentOfRelation,
                    "UpperSegmentOfRelation by calling UpperSegmentOfRelationWithGivenRange with the WithGiven object(s)",
                    [
                        [ UpperSegmentOfRelationWithGivenRange, 1 ],
                        [ PowerObject, 1 ],
                    ],
  function( cat, a, b, mu )
    
    return UpperSegmentOfRelationWithGivenRange( cat, a, b, mu, PowerObject( cat, b ) );
    
end : is_with_given_derivation := true );
